AWSTemplateFormatVersion: 2010-09-09
Description: The AWS CloudFormation template for this Serverless application
Resources:
  ServerlessDeploymentBucket:
    Type: 'AWS::S3::Bucket'
  GetLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: /aws/lambda/guestbookdemo1-dev-get
  CreateLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: /aws/lambda/guestbookdemo1-dev-create
  IamRoleLambdaExecution:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Join 
            - '-'
            - - dev
              - guestbookdemo1
              - lambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                Resource:
                  - !Sub >-
                    arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/guestbookdemo1-dev-get:*
                  - !Sub >-
                    arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/guestbookdemo1-dev-create:*
              - Effect: Allow
                Action:
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub >-
                    arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/guestbookdemo1-dev-get:*:*
                  - !Sub >-
                    arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/guestbookdemo1-dev-create:*:*
              - Effect: Allow
                Action:
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                Resource: 'arn:aws:dynamodb:us-west-2:*:table/guestbookdemo1-dev'
      Path: /
      RoleName: !Join 
        - '-'
        - - guestbookdemo1
          - dev
          - us-west-2
          - lambdaRole
  GetLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/guestbookdemo1/dev/1502908692690-2017-08-16T18:38:12.690Z/guestbookdemo1.zip
      FunctionName: guestbookdemo1-dev-get
      Handler: readGuestBook.get
      MemorySize: 1024
      Role: !GetAtt 
        - IamRoleLambdaExecution
        - Arn
      Runtime: nodejs6.10
      Timeout: 6
      Environment:
        Variables:
          DYNAMODB_TABLE: guestbookdemo1-dev
    DependsOn:
      - GetLogGroup
      - IamRoleLambdaExecution
  GetLambdaVersionOCgUnscn7M71sjOxA42d1OBy7WbYWLMKPWN2svP9g:
    Type: 'AWS::Lambda::Version'
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref GetLambdaFunction
      CodeSha256: OCgUnscn7M+71sjOxA42d1OBy7WbYWLMKPWN2svP9+g=
  CreateLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref ServerlessDeploymentBucket
        S3Key: >-
          serverless/guestbookdemo1/dev/1502908692690-2017-08-16T18:38:12.690Z/guestbookdemo1.zip
      FunctionName: guestbookdemo1-dev-create
      Handler: writeGuestBook.create
      MemorySize: 1024
      Role: !GetAtt 
        - IamRoleLambdaExecution
        - Arn
      Runtime: nodejs6.10
      Timeout: 6
      Environment:
        Variables:
          DYNAMODB_TABLE: guestbookdemo1-dev
    DependsOn:
      - CreateLogGroup
      - IamRoleLambdaExecution
  CreateLambdaVersionOCgUnscn7M71sjOxA42d1OBy7WbYWLMKPWN2svP9g:
    Type: 'AWS::Lambda::Version'
    DeletionPolicy: Retain
    Properties:
      FunctionName: !Ref CreateLambdaFunction
      CodeSha256: OCgUnscn7M+71sjOxA42d1OBy7WbYWLMKPWN2svP9+g=
  ApiGatewayRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: dev-guestbookdemo1
  ApiGatewayResourceGuestbook:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt 
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: guestbook
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodGuestbookOptions:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{statusCode:200}'
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,POST,GET'''
              method.response.header.Access-Control-Allow-Credentials: '''false'''
            ResponseTemplates:
              application/json: ''
      ResourceId: !Ref ApiGatewayResourceGuestbook
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodGuestbookGet:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceGuestbook
      RestApiId: !Ref ApiGatewayRestApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - GetLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
  ApiGatewayMethodGuestbookPost:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceGuestbook
      RestApiId: !Ref ApiGatewayRestApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - CreateLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
  ApiGatewayDeployment1502908692773:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: dev
    DependsOn:
      - ApiGatewayMethodGuestbookGet
      - ApiGatewayMethodGuestbookPost
  GetLambdaPermissionApiGateway:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt 
        - GetLambdaFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref ApiGatewayRestApi
          - /*/*
  CreateLambdaPermissionApiGateway:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt 
        - CreateLambdaFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref ApiGatewayRestApi
          - /*/*
  WebsiteBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: PublicRead
      BucketName: www.cidemo2.com
  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    DeletionPolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: date
          AttributeType: 'N'
      KeySchema:
        - AttributeName: date
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '1'
        WriteCapacityUnits: '1'
      TableName: guestbookdemo1-dev
Outputs:
  ServerlessDeploymentBucketName:
    Value: !Ref ServerlessDeploymentBucket
  GetLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !Ref GetLambdaVersionOCgUnscn7M71sjOxA42d1OBy7WbYWLMKPWN2svP9g
  CreateLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value: !Ref CreateLambdaVersionOCgUnscn7M71sjOxA42d1OBy7WbYWLMKPWN2svP9g
  ServiceEndpoint:
    Description: URL of the service endpoint
    Value: !Join 
      - ''
      - - 'https://'
        - !Ref ApiGatewayRestApi
        - .execute-api.us-west-2.amazonaws.com/dev
